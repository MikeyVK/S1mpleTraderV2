# backend/dtos/critical_event.py
"""
Contains the DTO for a critical event notification.

@layer: Backend (DTO)
@dependencies: [pydantic, pandas, uuid]
@responsibilities:
    - Defines the standardized data structure for a critical event detected
      by the StrategyEngine.
"""
import uuid
import pandas as pd
from pydantic import BaseModel, ConfigDict, Field

class CriticalEvent(BaseModel):
    """
    Represents a minimal, agnostic notification of a critical event.

    This DTO acts as an "alarm bell" generated by a CriticalEventDetector
    plugin (Fase 9). It signals that a significant systemic event has
    occurred. The detailed context that led to this event is stored
    separately in the ContextRecorder. The RunService interprets this
    event and decides on the appropriate action (e.g., halting trading).

    Attributes:
        correlation_id (uuid.UUID): A unique ID for this specific event.
        event_type (str): A string identifier for the event type (e.g., "MAX_DRAWDOWN_BREACHED").
        timestamp (pd.Timestamp): The timestamp of the candle on which the event was detected.
    """
    correlation_id: uuid.UUID = Field(default_factory=uuid.uuid4)
    event_type: str
    timestamp: pd.Timestamp

    model_config = ConfigDict(
        arbitrary_types_allowed=True
    )
