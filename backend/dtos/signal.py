# backend/dtos/signal.py
"""
Contains the data class for a raw, unfiltered signal event.

@layer: Backend (DTO)
@dependencies: [pydantic, pandas, uuid]
@responsibilities:
    - Defines the standardized data structure for a raw signal event, generated
      by a SignalGenerator plugin.
"""
import uuid
from typing import Literal
from pydantic import BaseModel, Field, ConfigDict
import pandas as pd

class Signal(BaseModel):
    """Represents a pure, unrefined signal event from a specific strategy logic.

    This DTO signifies that a pattern or condition was met at a specific time.
    It contains only the essential "what, where, and when" information, plus a
    unique identifier for traceability. This is the first DTO in the
    SignalOrchestrator's pipeline.

    Attributes:
        correlation_id (uuid.UUID): The unique ID that links this signal and all
                                    subsequent objects (Trade, ClosedTrade) to its
                                    full context log in the ContextRecorder.
                                    Generated by the SignalGenerator.
        timestamp (pd.Timestamp): The timestamp of the candle where the signal occurred.
        asset (str): The asset for which the signal was generated (e.g., 'BTC/EUR').
        direction (str): The directional bias of the signal ('long' or 'short').
        signal_type (str): The name of the logic that generated the signal (e.g.,
                           'golden_cross', 'fvg_entry_detector'). This defines the
                           identity of the signal.
    """
    correlation_id: uuid.UUID = Field(default_factory=uuid.uuid4)
    timestamp: pd.Timestamp
    asset: str
    direction: Literal['long', 'short']
    signal_type: str

    model_config = ConfigDict(
        arbitrary_types_allowed=True
    )
